package edu.aem.training.eventhandler;

import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.Service;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.jcr.api.SlingRepository;
import org.osgi.framework.BundleContext;
import org.osgi.service.component.ComponentContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.observation.EventIterator;
import javax.jcr.observation.EventListener;
import javax.jcr.observation.ObservationManager;
import javax.jcr.observation.Event;
import java.util.Arrays;


@Component(immediate = true)
@Service
public class SimpleDSComponent implements EventListener {

    private Logger log = LoggerFactory.getLogger(this.getClass());

    private BundleContext bundleContext;

    @Reference
    private SlingRepository repository;

    @Reference
    private ResourceResolverFactory resolverFactory;

    private Session session;

    private ObservationManager observationManager;

    public void run() {
        log.info("Running...");
    }

    // Place app logic here to define the AEM Custom Event Handler
    protected void activate(ComponentContext ctx) {

        this.bundleContext = ctx.getBundleContext();

        try {
            // Invoke the adapTo method to create a Session
//            ResourceResolver resourceResolver = resolverFactory.getAdministrativeResourceResolver(null);
//            session = resourceResolver.adaptTo(Session.class);
            session = repository.loginAdministrative(null);

            // Setup the event handler to responde to a new claim under content/claim...
            observationManager = session.getWorkspace().getObservationManager();
            final String[] types = {"cq:Page"};
            // Define the path
            final String path = "/content";
            observationManager.addEventListener(this, Event.NODE_ADDED, path,
                    true,        // [isDeep] events whose associated node is at path or within its subtree
                    null,    // [uuid] events whose associated node has one of the UUID's in this list
                    null,   // [nodeTypeName] events whose associated node has one of the node types in this list
                    false      // [noLocal] events generated by the session through which the listener was registered aare not ignored
            );
            log.info("Observation property to {} nodes under {}", Arrays.asList(types), path);


        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected void deactivate(ComponentContext componentContext) throws RepositoryException {

        if(observationManager != null) {
            observationManager.removeEventListener(this);
        }

        if(session != null) {
            session.logout();
            session = null;
        }
    }

    // Define app logic that is fired when the even pccurs - simply track the time
    // when the event occured
    public void onEvent(EventIterator eventIterator) {

        log.info("A new Page was added to /content");
    }
}
